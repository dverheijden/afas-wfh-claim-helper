{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createTheme","palette","primary","main","orange","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","_jsxs","React","StrictMode","children","_jsx","CssBaseline","useState","dates","setDates","datesString","setDatesString","noDays","setNoDays","ThemeProvider","Object","assign","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","CalendarMonthIcon","Typography","variant","marginBottom","Calendar","multiple","value","onChange","length","map","date","weekDay","name","toLowerCase","month","day","dayToNth","join","datesToString","format","sort","plugins","DatePanel","TextField","margin","label","fullWidth","multiline","document","getElementById"],"mappings":"yTAOMA,EAAQC,YAAY,CACtBC,QAAS,CACLC,QAAS,CACLC,KAAMC,IAAO,SCVzB,IAWeC,EAXS,SAACC,GACjBA,GACA,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACX,GAER,ECJDO,IAASC,OAAOC,eAAMC,IAAMC,WAAY,CAAEC,SAAU,CAACC,cAAKC,IAAa,CAAC,GAAID,eF2B7D,WACX,MAA0BH,IAAMK,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCP,IAAMK,SAAS,IAArD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4BT,IAAMK,SAAS,GAA3C,mBAAOK,EAAP,KAAeC,EAAf,KAMA,OAAQR,cAAKS,IAAeC,OAAOC,OAAO,CAAE/B,MAAOA,GAAS,CAAEmB,SAAUH,eAAMgB,IAAWF,OAAOC,OAAO,CAAEE,UAAW,OAAQC,SAAU,MAAQ,CAAEf,SAAU,CAACC,cAAKC,IAAa,CAAC,GAAIL,eAAMmB,IAAKL,OAAOC,OAAO,CAAEK,GAAI,CAC7LC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,WACX,CAAErB,SAAU,CAACC,cAAKqB,IAAQX,OAAOC,OAAO,CAAEK,GAAI,CAAEM,EAAG,EAAGC,QAAS,iBAAoB,CAAExB,SAAUC,cAAKwB,IAAmB,CAAC,MAAQxB,cAAKyB,IAAYf,OAAOC,OAAO,CAAEE,UAAW,KAAMa,QAAS,MAAQ,CAAE3B,SAAU,sBAAwBH,eAAM6B,IAAYf,OAAOC,OAAO,CAAEM,UAAW,EAAGU,aAAc,GAAK,CAAE5B,SAAU,CAAC,6LAA8LC,cAAK,KAAM,CAAC,GAAIA,cAAK,KAAM,CAAC,GAAI,oGAAuGA,cAAK4B,WAAU,CAAEC,UAAU,EAAMC,MAAO3B,EAAO4B,SAVhsB,SAA0B5B,GACtBC,EAASD,GACTK,EAAUL,EAAM6B,QAChB1B,EAZR,SAAuBH,GACnB,OAAOA,EACF8B,KAAI,SAACC,GAAD,gBAAaA,EAAKC,QAAQC,KAAKC,cAA/B,YAAgDH,EAAKI,MAAMF,KAAKC,cAAhE,YAAiFH,EAAKK,KAAtF,OAhBb,SAAkBA,GACd,GAAIA,EAAM,GAAKA,EAAM,GACjB,MAAO,KACX,OAAQA,EAAM,IACV,KAAK,EACD,MAAO,KACX,KAAK,EACD,MAAO,KACX,KAAK,EACD,MAAO,KACX,QACI,MAAO,KAElB,CAGwGC,CAASN,EAAKK,KAA1G,IACJE,KAAK,KACb,CAQsBC,CAAcvC,GAChC,EAM2tBwC,OAAQ,eAAgBC,MAAM,EAAMC,QAAS,CAAC7C,cAAK8C,IAAW,CAAC,MAAQ9C,cAAK+C,IAAW,CAAEC,OAAQ,SAAUlB,MAAOvB,EAAQ0C,MAAO,mBAAqBjD,cAAK+C,IAAW,CAAEG,WAAW,EAAMC,WAAW,EAAMH,OAAQ,SAAUlB,MAAOzB,EAAa4C,MAAO,2BACt9B,GE1CqF,CAAC,MAAQG,SAASC,eAAe,SAIvHnE,G","file":"static/js/main.2160d1e8.chunk.js","sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Calendar } from \"react-multi-date-picker\";\nimport DatePanel from \"react-multi-date-picker/plugins/date_panel\";\nimport { Avatar, Box, Container, createTheme, CssBaseline, TextField, ThemeProvider, Typography, } from \"@mui/material\";\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport { orange } from \"@mui/material/colors\";\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: orange[500],\n        },\n    },\n});\nfunction dayToNth(day) {\n    if (day > 3 && day < 21)\n        return \"th\";\n    switch (day % 10) {\n        case 1:\n            return \"st\";\n        case 2:\n            return \"nd\";\n        case 3:\n            return \"rd\";\n        default:\n            return \"th\";\n    }\n}\nfunction datesToString(dates) {\n    return dates\n        .map((date) => `${date.weekDay.name.toLowerCase()} ${date.month.name.toLowerCase()} ${date.day}${dayToNth(date.day)}`)\n        .join(\", \");\n}\nexport default function App() {\n    const [dates, setDates] = React.useState([]);\n    const [datesString, setDatesString] = React.useState(\"\");\n    const [noDays, setNoDays] = React.useState(0);\n    function handleDateChange(dates) {\n        setDates(dates);\n        setNoDays(dates.length);\n        setDatesString(datesToString(dates));\n    }\n    return (_jsx(ThemeProvider, Object.assign({ theme: theme }, { children: _jsxs(Container, Object.assign({ component: \"main\", maxWidth: \"sm\" }, { children: [_jsx(CssBaseline, {}), _jsxs(Box, Object.assign({ sx: {\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    } }, { children: [_jsx(Avatar, Object.assign({ sx: { m: 1, bgcolor: \"primary.main\" } }, { children: _jsx(CalendarMonthIcon, {}) })), _jsx(Typography, Object.assign({ component: \"h1\", variant: \"h5\" }, { children: \"WFH Claim Helper\" })), _jsxs(Typography, Object.assign({ marginTop: 1, marginBottom: 3 }, { children: [\"AFAS requires a very specific format for claiming your Working From Home allowance. So I thought that it would be a nice dev-day project to make a helper for making this process easier. \", _jsx(\"br\", {}), _jsx(\"br\", {}), \"Just select the days that you've worked from home and copy-paste the \\\"Days Summary\\\" to AFAS.\"] })), _jsx(Calendar, { multiple: true, value: dates, onChange: handleDateChange, format: \"DD MMMM YYYY\", sort: true, plugins: [_jsx(DatePanel, {})] }), _jsx(TextField, { margin: \"normal\", value: noDays, label: \"Number of Days\" }), _jsx(TextField, { fullWidth: true, multiline: true, margin: \"normal\", value: datesString, label: \"Days Summary\" })] }))] })) })));\n}\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\nexport default reportWebVitals;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nReactDOM.render(_jsxs(React.StrictMode, { children: [_jsx(CssBaseline, {}), _jsx(App, {})] }), document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}